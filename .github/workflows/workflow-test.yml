name: test

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  GO_VERSION: "1.24"
  GOTOOLCHAIN: local
  SHORT_TIMEOUT: 5
  LONG_TIMEOUT: 60

jobs:
  # This job builds the dependency target of the test docker image for all supported architectures and cache it in GHA
  build-dependencies:
    timeout-minutes: 15
    name: dependencies |  ${{ matrix.containerd }} | ${{ matrix.arch }}
    runs-on: "${{ matrix.runner }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-24.04
            containerd: v1.6.38
            arch: amd64
          - runner: ubuntu-24.04
            containerd: v2.0.5
            arch: amd64
          - runner: ubuntu-24.04-arm
            containerd: v2.0.5
            arch: arm64
    env:
      CONTAINERD_VERSION: "${{ matrix.containerd }}"
      ARCH: "${{ matrix.arch }}"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1
      - name: "Expose GitHub Runtime variables for gha"
        uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124  # v3.1.0
      - name: "Build dependencies for the integration test environment image"
        run: |
          docker buildx create --name with-gha --use
          docker buildx build \
            --cache-to type=gha,compression=zstd,mode=max,scope=test-integration-dependencies-${ARCH} \
            --cache-from type=gha,scope=test-integration-dependencies-${ARCH} \
            --target build-dependencies --build-arg CONTAINERD_VERSION=${CONTAINERD_VERSION} .

  test-unit:
    name: "unit${{ inputs.hack }}"
    uses: ./.github/workflows/job-test-unit.yml
    strategy:
      fail-fast: false
      matrix:
        # Run on all supported platforms but freebsd
        # Additionally run on canary for linux
        include:
          - runner: "ubuntu-24.04"
          - runner: "macos-15"
          - runner: "windows-2025"
          - runner: "ubuntu-24.04"
            canary: true
    with:
      runner: ${{ matrix.runner }}
      canary: ${{ matrix.canary && true || false }}
      # Windows routinely go over 5 minutes
      timeout: 10
      go-version: 1.24
      windows-cni-version: v0.3.1
      linux-cni-version: v1.7.1
      linux-cni-sha: 1a28a0506bfe5bcdc981caf1a49eeab7e72da8321f1119b7be85f22621013098

  test-integration:
    needs: build-dependencies
    timeout-minutes: 40
    name: rootful | ${{ matrix.containerd }} | ${{ matrix.runner }}
    runs-on: "${{ matrix.runner }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu: 22.04
            containerd: v1.6.38
            runner: "ubuntu-22.04"
            arch: amd64
          - ubuntu: 24.04
            containerd: v2.0.5
            runner: "ubuntu-24.04"
            arch: amd64
          - ubuntu: 24.04
            containerd: v2.0.5
            runner: "ubuntu-24.04-arm"
            arch: arm64
    env:
      CONTAINERD_VERSION: "${{ matrix.containerd }}"
      ARCH: "${{ matrix.arch }}"
      UBUNTU_VERSION: "${{ matrix.ubuntu }}"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1
      - name: "Expose GitHub Runtime variables for gha"
        uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124  # v3.1.0
      - name: "Prepare integration test environment"
        run: |
          docker buildx create --name with-gha --use
          docker buildx build \
            --output=type=docker \
            --cache-from type=gha,scope=test-integration-dependencies-${ARCH} \
            -t test-integration --target test-integration --build-arg UBUNTU_VERSION=${UBUNTU_VERSION} --build-arg CONTAINERD_VERSION=${CONTAINERD_VERSION} .
      - name: "Remove snap loopback devices (conflicts with our loopback devices in TestRunDevice)"
        run: |
          sudo systemctl disable --now snapd.service snapd.socket
          sudo apt-get purge -qq snapd
          sudo losetup -Dv
          sudo losetup -lv
      - name: "Register QEMU (tonistiigi/binfmt)"
        run: |
          # `--install all` will only install emulation for architectures that cannot be natively executed
          # Since some arm64 platforms do provide native fallback execution for 32 bits,
          # armv7 emulation may or may not be installed, causing variance in the result of `uname -m`.
          # To avoid that, we explicitly list the architectures we do want emulation for.
          docker run --privileged --rm tonistiigi/binfmt --install linux/amd64
          docker run --privileged --rm tonistiigi/binfmt --install linux/arm64
      - name: "Run integration tests"
        run: docker run -t --rm --privileged test-integration ./hack/test-integration.sh -test.only-flaky=false
      - name: "Run integration tests (flaky)"
        run: docker run -t --rm --privileged test-integration ./hack/test-integration.sh -test.only-flaky=true

  test-integration-ipv6:
    needs: build-dependencies
    timeout-minutes: 15
    name: ipv6 | ${{ matrix.containerd }} | ${{ matrix.ubuntu }}
    runs-on: "ubuntu-${{ matrix.ubuntu }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu: 24.04
            containerd: v2.0.5
            arch: amd64
    env:
      CONTAINERD_VERSION: "${{ matrix.containerd }}"
      ARCH: "${{ matrix.arch }}"
      UBUNTU_VERSION: "${{ matrix.ubuntu }}"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1
      - name: Enable ipv4 and ipv6 forwarding
        run: |
          sudo sysctl -w net.ipv6.conf.all.forwarding=1
          sudo sysctl -w net.ipv4.ip_forward=1
      - name: "Expose GitHub Runtime variables for gha"
        uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124  # v3.1.0
      - name: Enable IPv6 for Docker, and configure docker to use containerd for gha
        run: |
          sudo mkdir -p /etc/docker
          echo '{"ipv6": true, "fixed-cidr-v6": "2001:db8:1::/64", "experimental": true, "ip6tables": true}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: "Prepare integration test environment"
        run: |
          docker buildx create --name with-gha --use
          docker buildx build \
            --output=type=docker \
            --cache-from type=gha,scope=test-integration-dependencies-${ARCH} \
            -t test-integration --target test-integration --build-arg UBUNTU_VERSION=${UBUNTU_VERSION} --build-arg CONTAINERD_VERSION=${CONTAINERD_VERSION} .
      - name: "Remove snap loopback devices (conflicts with our loopback devices in TestRunDevice)"
        run: |
          sudo systemctl disable --now snapd.service snapd.socket
          sudo apt-get purge -qq snapd
          sudo losetup -Dv
          sudo losetup -lv
      - name: "Register QEMU (tonistiigi/binfmt)"
        run: |
          # `--install all` will only install emulation for architectures that cannot be natively executed
          # Since some arm64 platforms do provide native fallback execution for 32 bits,
          # armv7 emulation may or may not be installed, causing variance in the result of `uname -m`.
          # To avoid that, we explicitly list the architectures we do want emulation for.
          docker run --privileged --rm tonistiigi/binfmt --install linux/amd64
          docker run --privileged --rm tonistiigi/binfmt --install linux/arm64
      - name: "Run integration tests"
        # The nested IPv6 network inside docker and qemu is complex and needs a bunch of sysctl config.
        # Therefore, it's hard to debug why the IPv6 tests fail in such an isolation layer.
        # On the other side, using the host network is easier at configuration.
        # Besides, each job is running on a different instance, which means using host network here
        # is safe and has no side effects on others.
        run: docker run --network host -t --rm --privileged test-integration ./hack/test-integration.sh -test.only-ipv6

  test-integration-rootless:
    needs: build-dependencies
    timeout-minutes: 40
    name: "${{ matrix.target }} | ${{ matrix.containerd }} | ${{ matrix.rootlesskit }} | ${{ matrix.ubuntu }} || ${{ matrix.nerdctl }}"
    runs-on: "${{ matrix.runner }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu: 22.04
            containerd: v1.6.38
            rootlesskit: v1.1.1  # Deprecated
            target: rootless
            runner: "ubuntu-22.04"
            arch: amd64
          - ubuntu: 24.04
            containerd: v2.0.5
            rootlesskit: v2.3.4
            target: rootless
            arch: amd64
            runner: "ubuntu-24.04"
          - ubuntu: 24.04
            containerd: v2.0.5
            rootlesskit: v2.3.4
            target: rootless
            arch: arm64
            runner: "ubuntu-24.04-arm"
          - ubuntu: 24.04
            containerd: v2.0.5
            rootlesskit: v2.3.4
            target: rootless-port-slirp4netns
            arch: amd64
            runner: "ubuntu-24.04"
          - ubuntu: 24.04
            containerd: v2.0.5
            rootlesskit: v2.3.4
            target: rootless
            arch: amd64
            runner: "ubuntu-24.04"
            nerdctl: "nerdctl.gomodjail"
            comment: "Flaky, not a blocker for merging PRs"
    env:
      CONTAINERD_VERSION: "${{ matrix.containerd }}"
      ARCH: "${{ matrix.arch }}"
      UBUNTU_VERSION: "${{ matrix.ubuntu }}"
      ROOTLESSKIT_VERSION: "${{ matrix.rootlesskit }}"
      TEST_TARGET: "test-integration-${{ matrix.target }}"
      NERDCTL: "${{ matrix.nerdctl }}"
    steps:
      - name: "Set up AppArmor"
        if: matrix.ubuntu == '24.04'
        run: |
          cat <<EOT | sudo tee "/etc/apparmor.d/usr.local.bin.rootlesskit"
          abi <abi/4.0>,
          include <tunables/global>

          /usr/local/bin/rootlesskit flags=(unconfined) {
            userns,

            # Site-specific additions and overrides. See local/README for details.
            include if exists <local/usr.local.bin.rootlesskit>
          }
          EOT
          sudo systemctl restart apparmor.service
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 1
      - name: "Register QEMU (tonistiigi/binfmt)"
        run: |
          # `--install all` will only install emulation for architectures that cannot be natively executed
          # Since some arm64 platforms do provide native fallback execution for 32 bits,
          # armv7 emulation may or may not be installed, causing variance in the result of `uname -m`.
          # To avoid that, we explicitly list the architectures we do want emulation for.
          docker run --privileged --rm tonistiigi/binfmt --install linux/amd64
          docker run --privileged --rm tonistiigi/binfmt --install linux/arm64
      - name: "Expose GitHub Runtime variables for gha"
        uses: crazy-max/ghaction-github-runtime@3cb05d89e1f492524af3d41a1c98c83bc3025124  # v3.1.0
      - name: "Prepare (network driver=slirp4netns, port driver=builtin)"
        run: |
          docker buildx create --name with-gha --use
          docker buildx build \
            --output=type=docker \
            --cache-from type=gha,scope=test-integration-dependencies-${ARCH} \
            -t ${TEST_TARGET} --target ${TEST_TARGET} --build-arg UBUNTU_VERSION=${UBUNTU_VERSION} --build-arg CONTAINERD_VERSION=${CONTAINERD_VERSION} --build-arg ROOTLESSKIT_VERSION=${ROOTLESSKIT_VERSION} .
      - name: "Disable BuildKit for RootlessKit v1 (workaround for issue #622)"
        run: |
          # https://github.com/containerd/nerdctl/issues/622
          WORKAROUND_ISSUE_622=
          if echo "${ROOTLESSKIT_VERSION}" | grep -q v1; then
            WORKAROUND_ISSUE_622=1
          fi
          echo "WORKAROUND_ISSUE_622=${WORKAROUND_ISSUE_622}" >> "$GITHUB_ENV"
      - name: "Test (network driver=slirp4netns, port driver=builtin)"
        run: docker run -t --rm --privileged -e WORKAROUND_ISSUE_622=${WORKAROUND_ISSUE_622} ${TEST_TARGET} /test-integration-rootless.sh ./hack/test-integration.sh -test.only-flaky=false -test.target=${NERDCTL}
      - name: "Test (network driver=slirp4netns, port driver=builtin) (flaky)"
        if: matrix.nerdctl != 'nerdctl.gomodjail'
        run: docker run -t --rm --privileged -e WORKAROUND_ISSUE_622=${WORKAROUND_ISSUE_622} ${TEST_TARGET} /test-integration-rootless.sh ./hack/test-integration.sh -test.only-flaky=true -test.target=${NERDCTL}

  test-integration-host:
    name: "in-host${{ inputs.hack }}"
    uses: ./.github/workflows/job-test-in-host.yml
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test on windows w/o canary
          - runner: windows-2022
          - runner: windows-2025
            canary: true
          # Test docker on linux
          - runner: ubuntu-24.04
            binary: docker

          # FIXME: running nerdctl on the host is work in progress
          # (we miss runc to be installed on the host - and obviously other deps)
          # Plan is to pause this for now and first consolidate dependencies management (wrt Dockerfile vs. host-testing CI)
          # before we can really start testing linux nerdctl on the host.
          # - runner: ubuntu-24.04
          # - runner: ubuntu-24.04
          #  canary: true
    with:
      timeout: 45
      runner: ${{ matrix.runner }}
      binary: ${{ matrix.binary != '' && matrix.binary || 'nerdctl' }}
      canary: ${{ matrix.canary && true || false }}
      go-version: 1.24
      windows-cni-version: v0.3.1
      containerd-version: 2.0.5
      # Note: these as for amd64
      containerd-sha: 88ab31f3e78e4d2fa12dcb933032122d11d441c83b79a89c6c8076f871e50df8
      containerd-service-sha: 12a76c13cad132222d2b3d2025e56212d205d37eca77508dbbfcdf6ababbf70a
      linux-cni-version: v1.7.1
      linux-cni-sha: 1a28a0506bfe5bcdc981caf1a49eeab7e72da8321f1119b7be85f22621013098
